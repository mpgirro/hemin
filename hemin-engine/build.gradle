buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
//    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
//        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.23"
    }
}

/*
plugins {
    id "com.github.maiflai.scalatest" version "0.23"
}
*/

defaultTasks 'clean build publishToMavenLocal'

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'application'
//apply plugin: 'com.github.johnrengelman.shadow' // to build fat jars with gradle
apply plugin: 'maven-publish'
//apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: "com.github.maiflai.scalatest"



sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
assert System.properties['java.specification.version'] == '1.8'

group 'io.hemin'
version '1.0-SNAPSHOT'
description = ''

mainClassName = 'io.hemin.engine.EngineApp'

compileJava {
    options.compilerArgs = [
        '-Xlint:deprecation'
    ]
}

ext {
    scalaMajorVersion = '2.12'
    scalaMinorVersion = '4'
    scalatestVersion = '3.0.5'
    akkaVersion = '2.5.11'
    akkaHttpVersion = '10.0.11'
    slf4jVersion = '1.7.25'
    logbackVersion = '1.2.3'
    luceneVersion = '7.2.0'
    solrVersion = '7.5.0'
    guavaVersion = '24.1-jre'
    gsonVersion = '2.8.2'
    hasidsVersion = '1.0.3'
    romeVersion = '1.9.0'
    jsoupVersion = '1.11.2'
    sttpVersion = '1.1.10'
    reactivemongoVersion = '0.16.0'
    scrimageVersion = '2.1.0'
    enumeratumVersion = '1.5.13'       // see https://github.com/lloydmeta/enumeratum
    //junitVintageVersion = '4.12'
    //junitJupiterVersion = '5.1.0'
    //junitPlatformVersion = '1.1.0'
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {

    compile "org.scala-lang:scala-compiler:$scalaMajorVersion.$scalaMinorVersion"
    compile "org.scala-lang:scala-library:$scalaMajorVersion.$scalaMinorVersion"

    compile "org.scala-lang.modules:scala-java8-compat_$scalaMajorVersion:0.8.0" // https://github.com/scala/scala-java8-compat

    compile "com.typesafe.akka:akka-actor_$scalaMajorVersion:$akkaVersion"
    compile "com.typesafe.akka:akka-slf4j_$scalaMajorVersion:$akkaVersion"
    compile "com.typesafe.akka:akka-stream_$scalaMajorVersion:$akkaVersion"
    compile "com.typesafe.akka:akka-http_$scalaMajorVersion:$akkaHttpVersion"
    compile "com.typesafe.akka:akka-http-spray-json_$scalaMajorVersion:$akkaHttpVersion"
    compile "com.typesafe.akka:akka-cluster_$scalaMajorVersion:$akkaVersion"
    compile "com.typesafe.akka:akka-cluster-tools_$scalaMajorVersion:$akkaVersion"

    compile "com.typesafe.scala-logging:scala-logging_$scalaMajorVersion:3.8.0" // https://github.com/lightbend/scala-logging
    compile "ch.qos.logback:logback-classic:$logbackVersion"                    // https://github.com/qos-ch/logback


    compile "org.reactivemongo:reactivemongo_$scalaMajorVersion:$reactivemongoVersion"   // https://github.com/ReactiveMongo/ReactiveMongo

    compile "org.apache.lucene:lucene-core:$luceneVersion"                      // https://github.com/apache/lucene-solr
    compile "org.apache.lucene:lucene-queryparser:$luceneVersion"
    compile "org.apache.lucene:lucene-analyzers-common:$luceneVersion"

    compile "org.apache.solr:solr-solrj:$solrVersion"

    compile "org.jsoup:jsoup:$jsoupVersion"                                     // https://github.com/jhy/jsoup
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.google.guava:guava:$guavaVersion"                              // https://github.com/google/guava
    compile "com.rometools:rome:$romeVersion"                                   // https://github.com/rometools/rome
    compile "com.rometools:rome-modules:$romeVersion"
    compile "org.hashids:hashids:$hasidsVersion"                                // https://github.com/10cella/hashids-java
    compile "com.softwaremill.sttp:core_$scalaMajorVersion:$sttpVersion"        // https://github.com/softwaremill/sttp
    compile "com.softwaremill.sttp:akka-http-backend_$scalaMajorVersion:$sttpVersion"

    compile "com.lihaoyi:pprint_$scalaMajorVersion:0.5.3"                       // http://www.lihaoyi.com/PPrint/
    compile "com.beachape:enumeratum_$scalaMajorVersion:1.5.13"                 // https://github.com/lloydmeta/enumeratum

    compile "com.sksamuel.scrimage:scrimage-core_2.11:$scrimageVersion"         // https://github.com/sksamuel/scrimage
    compile "com.sksamuel.scrimage:scrimage-io-extra_2.11:$scrimageVersion"
    compile "com.sksamuel.scrimage:scrimage-filters_2.11:$scrimageVersion"

    /*
    // TODO remove? since we fully use scalatest now?
    // JUnit Jupiter API and TestEngine implementation
    //test.useJUnitPlatform()
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntimeOnly    "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    //testCompile("junit:junit:4.12")
    //testRuntime("org.junit.vintage:junit-vintage-engine:4.12.0") //Support JUnit 3 and JUnit 4 tests
    testCompile "org.junit.platform:junit-platform-runner:$junitPlatformVersion" // Enable use of the JUnitPlatform Runner within the IDE
    */

    testCompile "org.scalatest:scalatest_$scalaMajorVersion:$scalatestVersion"
    testRuntime 'org.pegdown:pegdown:1.4.2' // In addition to your testCompile dependency on scalatest, you also require a testRuntime dependency on pegdown in order to create the HTML report.

    testCompile "com.github.simplyscala:scalatest-embedmongo_$scalaMajorVersion:0.2.4"
}

jar {
    doLast {
        exclude("**/resources/logback.xml")
//        exclude("**/logback.xml")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

// Generating gradle wrapper so people don't have to have the Gradle version preinstalled
task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = '4.6'
    distributionType = Wrapper.DistributionType.ALL
}

run {
    standardInput = System.in
}


