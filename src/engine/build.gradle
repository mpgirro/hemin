// Adding ScalaStyle support
buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.9.0'
        //classpath 'org.liquibase:liquibase-gradle-plugin:1.2.4'
        classpath 'com.h2database:h2:1.4.196'
        //classpath 'org.yaml:snakeyaml:1.15'
    }
}

plugins {
    id 'org.liquibase.gradle' version '1.2.4'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}

defaultTasks 'run'

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'scalaStyle'
apply plugin: 'project-report'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
//apply plugin: 'org.liquibase.gradle'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
assert System.properties['java.specification.version'] == '1.8'

group 'at.irro.dipl'
version '1.0-SNAPSHOT'
description = ''

mainClassName = 'echo.actor.EchoApp'

ext {
    scala_major_version = '2.12'
    scala_minor_version = '4'
    akka_version = '2.5.11'
    akka_http_version = '10.0.11'
    logback_version = '1.2.3'
    echo_core_version = '1.0-SNAPSHOT'
    guava_version = '24.1-jre'
    spring_data_jpa_version = '1.11.10.RELEASE'
    h2_version = '1.4.196'
    liquibase_version = '3.5.3'
    liquibase_slf4j_version = '2.0.0'
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile group: 'org.scala-lang', name: 'scala-compiler', version: "${scala_major_version}.${scala_minor_version}"
    compile group: 'org.scala-lang', name: 'scala-library', version: "${scala_major_version}.${scala_minor_version}"

    compile group: 'org.scala-lang.modules', name: "scala-java8-compat_${scala_major_version}", version: '0.8.0'

    compile group: 'com.typesafe.akka', name: "akka-actor_${scala_major_version}", version: akka_version
    compile "com.typesafe.akka:akka-slf4j_${scala_major_version}:${akka_version}"
    compile "com.typesafe.akka:akka-stream_${scala_major_version}:${akka_version}"
    compile "com.typesafe.akka:akka-http_${scala_major_version}:${akka_http_version}"
    compile "com.typesafe.akka:akka-http-spray-json_${scala_major_version}:${akka_http_version}"
    compile "com.typesafe.akka:akka-cluster_${scala_major_version}:${akka_version}"
    compile "com.typesafe.akka:akka-cluster-tools_${scala_major_version}:${akka_version}"

    compile group: 'com.typesafe.scala-logging', name: "scala-logging_${scala_major_version}", version: '3.8.0'

    compile "ch.qos.logback:logback-classic:${logback_version}"
    //compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.8.0-beta0'
    //compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.8.0-beta0'
    /*
    compile('org.slf4j:jcl-over-slf4j:1.8.0-beta0') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    */

    compile "at.irro.dipl:echo-core:$echo_core_version"

    compile "com.google.guava:guava:${guava_version}"

    compile 'org.jsoup:jsoup:1.11.2'                    // HTTP parser

    compile "com.github.swagger-akka-http:swagger-akka-http_${scala_major_version}:0.11.2"
    compile "ch.megard:akka-http-cors_${scala_major_version}:0.2.2"

    compile 'com.devskiller.friendly-id:friendly-id:1.0.0' // TODO unused?

    compile 'org.hashids:hashids:1.0.3' // TODO unused because in core now?

    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile group: 'org.springframework', name: 'spring-context', version: '4.3.14.RELEASE'
    compile group: 'org.springframework.data', name: 'spring-data-jpa', version: "${spring_data_jpa_version}"
    //compile group: 'org.hibernate', name: 'hibernate-core', version: '5.3.0.Beta1'  // note: not needed when using Spring-Data JPA --> produces an error
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '4.3.0.Final'
    compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.2.Final'

    //testCompile 'com.h2database:h2:1.4.196' // TODO only use H2 in test phase
    compile group: 'com.h2database', name: 'h2', version: "${h2_version}"

    compile group: 'org.liquibase', name: 'liquibase-core', version: "${liquibase_version}"
    runtime group: 'com.mattbertolini', name: 'liquibase-slf4j', version: "${liquibase_slf4j_version}"

    // compile group: 'com.sendgrid', name: 'java-http-client', version: '4.2.0'

    // TODO the apache HTTP components should become useless once I migrate fully to Akka-HTTP in Crawler
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5'
    compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.3' // see https://hc.apache.org/httpcomponents-asyncclient-dev/quickstart.html

    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    compile group: 'com.mortennobel', name: 'java-image-scaling', version: '0.8.6' // this is for image scaling

    compile group: 'com.softwaremill.sttp', name: "core_${scala_major_version}", version: '1.1.10'
    compile group: 'com.softwaremill.sttp', name: "akka-http-backend_${scala_major_version}", version: '1.1.10'

    testCompile(
        [group: 'junit', name: 'junit', version: '4.12'],
        [group: 'org.specs2', name: "specs2-core_${scala_major_version}", version: '4.0.2'],
        [group: 'org.specs2', name: "specs2-junit_${scala_major_version}", version: '4.0.2'],
    )
    //compile group: 'com.typesafe.akka', name: "akka-testkit_${scala_major_version}", version: akka_version //testCompile
    //compile group: 'com.typesafe.akka', name: "akka-http-testkit_${scala_major_version}", version: akka_http_version //testCompile
}

// Specifying the main class for the 'application' plugin
jar {
    baseName = project.name
    manifest {
        attributes("Main-Class": mainClassName)
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
shadowJar {
    baseName = project.name
    transform(AppendingTransformer) {
        resource = 'reference.conf'
    }
}

// Workaround for Gradle 3.+ and IDEA (https://discuss.gradle.org/t/idea-integration-with-scala-plugin-broken-since-gradle-3-0-no-such-property-daemonserver/19159/2)
ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false

tasks.withType(ScalaCompile) {
	scalaCompileOptions.additionalParameters = ["-unchecked", "-deprecation", "-feature", "-Xfatal-warnings", "-encoding", "utf8"]
}

// ScalaStyle config, by putting it to the project subdirectory, IDEA will automatically use it
scalaStyle {
    configLocation = "project/scalastyle_config.xml"
    includeTestSourceDirectory = true
    source = "src/main/scala"
    testSource = "src/test/scala"
}

// Run ScalaStyle with the tests
check {
//    dependsOn "scalaStyle" // TODO re-activate this
}

// specs2 console logging
test {
	testLogging.showStandardStreams = true
	systemProperty "specs2.commandline", "console"
}

// Generating gradle wrapper so people don't have to have the Gradle version preinstalled
task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
    distributionType = Wrapper.DistributionType.ALL
}

run {
    standardInput = System.in
}


liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/liquibase/master.xml'
            //url 'jdbc:h2:mem:echo;FILE_LOCK=NO'
            url 'jdbc:h2:mem:echo;DATABASE_TO_UPPER=false'
            username 'sa'
            password ''
            /*
            changeLogParameters([ myToken: 'myvalue',
                                  second: 'secondValue'])
            */
        }
    }

    // runList = project.ext.runList
    // runList = 'main'
    runList = 'main'
}
